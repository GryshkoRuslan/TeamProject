const createError = require('http-errors');

const Erros = (code) => {
    switch (code) {
        case '23505': {
            return createError(400, 'Нарушение ограничения уникальности')
        }
        case '42703': {
            return createError(400, 'Переданны неправильные данные')
        }
        case '07001': {
            return createError(400, 'В команде было указано больше или меньше переменных среды, чем ожидалось')
       }
        case '07002': {
            return createError(400, 'В команде было указано больше или меньше переменных среды, чем ожидалось')
        }
        case '21000': {
            return createError(400, 'Запрос вернул несколько строк, но оператор был подготовлен только для одной строки результата')
        }
        case '42804': {
            return createError(400, 'Переменная среды и данные в базе имеют разные типы данных, и в этих данных содержится значение, которое нельзя преобразовать.')
        }
        case '22002': {
            return createError(400, 'Возвращено значение NULL, но переменная-индикатор NULL не задана.')
        }
        case '08003': {
            return createError(400, 'Программа попыталась использовать несуществующее подключение.')
        }
        case '26000': {
            return createError(400, 'Оператор, который вы пытаетесь выполнить, не был подготовлен.')
        }
        case '33000': {
            return createError(400, 'Указанный дескриптор не найден. Оператор, который вы пытаетесь использовать, не был подготовлен.')
        }
        case '07009': {
            return createError(400, 'Указанный индекс дескриптора вне диапазона.')
        }
        case '07006': {
            return createError(400, 'При выполнении динамического оператора база данных возвратила числовое/не числовое значение, тогда как переменная среды — не числовая/числовая.')
        }
        case '08007': {
            return createError(400, 'Сервер Postgres Pro сообщает, что клиент не может запускать, фиксировать или отменять транзакцию.')
        }
        case '08001': {
            return createError(400, 'Попытка подключения к базе данных была неудачной.')
        }
        case '34000': {
            return createError(400, 'Указано неверное имя курсора.')
        }
        case '25001': {
            return createError(400, 'Транзакция в процессе выполнения.')
        }
        case '25P01': {
            return createError(400, 'Нет активной (выполняющейся) транзакции.')
        }
        case '42P03': {
            return createError(400, 'Было указано имя существующего курсора.')
        }
        default: {
            return createError(400, `Неизвестная ошибка SQLSTATE - ${code}`)
        }
    }
};

module.exports = Erros;
